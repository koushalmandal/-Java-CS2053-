class Counter {
    int count = 0;

    // Increment without synchronization
    public void incrementUnsafe() {
        count++;
    }

    // Increment with synchronization
    public synchronized void incrementSafe() {
        count++;
    }
}

class CounterThread extends Thread {
    private Counter counter;
    private boolean safeMode;

    public CounterThread(Counter counter, boolean safeMode) {
        this.counter = counter;
        this.safeMode = safeMode;
    }

    @Override
    public void run() {
        for (int i = 0; i < 1000; i++) {
            if (safeMode) {
                counter.incrementSafe();
            } else {
                counter.incrementUnsafe();
            }
        }
    }
}

public class Main {
    public static void main(String[] args) {
        // Without synchronization
        Counter counter1 = new Counter();
        Thread t1 = new CounterThread(counter1, false);
        Thread t2 = new CounterThread(counter1, false);
        t1.start();
        t2.start();

        try {
            t1.join();
            t2.join();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }

        System.out.println("Final count without synchronization: " + counter1.count);

        // With synchronization
        Counter counter2 = new Counter();
        Thread t3 = new CounterThread(counter2, true);
        Thread t4 = new CounterThread(counter2, true);
        t3.start();
        t4.start();

        try {
            t3.join();
            t4.join();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }

        System.out.println("Final count with synchronization: " + counter2.count);
    }
}

class BankAccount {
    private int balance = 1000;

    // Withdraw without synchronization
    public void withdrawUnsafe(int amount) {
        if (balance >= amount) {
            System.out.println(Thread.currentThread().getName() + " is withdrawing " + amount);
            balance -= amount;
            System.out.println(Thread.currentThread().getName() + " completed withdrawal. Balance: " + balance);
        } else {
            System.out.println(Thread.currentThread().getName() + " - Not enough balance!");
        }
    }

    // Withdraw with synchronization
    public synchronized void withdrawSafe(int amount) {
        if (balance >= amount) {
            System.out.println(Thread.currentThread().getName() + " is withdrawing " + amount);
            balance -= amount;
            System.out.println(Thread.currentThread().getName() + " completed withdrawal. Balance: " + balance);
        } else {
            System.out.println(Thread.currentThread().getName() + " - Not enough balance!");
        }
    }
}

class WithdrawalThread extends Thread {
    private BankAccount account;
    private int amount;
    private boolean safeMode;

    public WithdrawalThread(BankAccount account, int amount, boolean safeMode, String name) {
        super(name);
        this.account = account;
        this.amount = amount;
        this.safeMode = safeMode;
    }

    @Override
    public void run() {
        if (safeMode) {
            account.withdrawSafe(amount);
        } else {
            account.withdrawUnsafe(amount);
        }
    }
}

public class Main {
    public static void main(String[] args) {
        BankAccount account = new BankAccount();

        System.out.println("=== Without Synchronization ===");
        Thread t1 = new WithdrawalThread(account, 700, false, "Person-1");
        Thread t2 = new WithdrawalThread(account, 700, false, "Person-2");
        t1.start();
        t2.start();

        try {
            t1.join();
            t2.join();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }

        System.out.println("\n=== With Synchronization ===");
        BankAccount safeAccount = new BankAccount();
        Thread t3 = new WithdrawalThread(safeAccount, 700, true, "Person-1");
        Thread t4 = new WithdrawalThread(safeAccount, 700, true, "Person-2");
        t3.start();
        t4.start();
    }
}
